{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12263484,"sourceType":"datasetVersion","datasetId":7727794}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import f1_score\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:52.862928Z","iopub.execute_input":"2025-06-24T06:06:52.863236Z","iopub.status.idle":"2025-06-24T06:06:52.868500Z","shell.execute_reply.started":"2025-06-24T06:06:52.863213Z","shell.execute_reply":"2025-06-24T06:06:52.867287Z"}},"outputs":[],"execution_count":258},{"cell_type":"code","source":"# Load data\ntrain = pd.read_csv(\"/kaggle/input/dataset/Train_Data.csv\")\ntest = pd.read_csv(\"/kaggle/input/dataset/Test_Data.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:52.871301Z","iopub.execute_input":"2025-06-24T06:06:52.872112Z","iopub.status.idle":"2025-06-24T06:06:52.896199Z","shell.execute_reply.started":"2025-06-24T06:06:52.872075Z","shell.execute_reply":"2025-06-24T06:06:52.895416Z"}},"outputs":[],"execution_count":259},{"cell_type":"code","source":"print(train[\"age_group\"].unique())\nprint(train[\"age_group\"].head(10))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:52.897482Z","iopub.execute_input":"2025-06-24T06:06:52.897743Z","iopub.status.idle":"2025-06-24T06:06:52.903584Z","shell.execute_reply.started":"2025-06-24T06:06:52.897722Z","shell.execute_reply":"2025-06-24T06:06:52.902493Z"}},"outputs":[{"name":"stdout","text":"['Adult' 'Senior' nan]\n0     Adult\n1     Adult\n2     Adult\n3     Adult\n4     Adult\n5     Adult\n6     Adult\n7     Adult\n8    Senior\n9     Adult\nName: age_group, dtype: object\n","output_type":"stream"}],"execution_count":260},{"cell_type":"code","source":"test.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:52.904750Z","iopub.execute_input":"2025-06-24T06:06:52.905066Z","iopub.status.idle":"2025-06-24T06:06:52.929387Z","shell.execute_reply.started":"2025-06-24T06:06:52.905043Z","shell.execute_reply":"2025-06-24T06:06:52.928627Z"}},"outputs":[{"execution_count":261,"output_type":"execute_result","data":{"text/plain":"      SEQN  RIAGENDR  PAQ605  BMXBMI  LBXGLU  DIQ010  LBXGLT  LBXIN\n0  77017.0       1.0     1.0    32.2    96.0     2.0   135.0  15.11\n1  75580.0       2.0     2.0    26.3   100.0     2.0   141.0  15.26\n2  73820.0       1.0     2.0    28.6   107.0     2.0   136.0   8.82\n3  80489.0       2.0     1.0    22.1    93.0     2.0   111.0  12.13\n4  82047.0       1.0     1.0    24.7    91.0     2.0   105.0   3.12","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SEQN</th>\n      <th>RIAGENDR</th>\n      <th>PAQ605</th>\n      <th>BMXBMI</th>\n      <th>LBXGLU</th>\n      <th>DIQ010</th>\n      <th>LBXGLT</th>\n      <th>LBXIN</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>77017.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>32.2</td>\n      <td>96.0</td>\n      <td>2.0</td>\n      <td>135.0</td>\n      <td>15.11</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>75580.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>26.3</td>\n      <td>100.0</td>\n      <td>2.0</td>\n      <td>141.0</td>\n      <td>15.26</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>73820.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>28.6</td>\n      <td>107.0</td>\n      <td>2.0</td>\n      <td>136.0</td>\n      <td>8.82</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>80489.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>22.1</td>\n      <td>93.0</td>\n      <td>2.0</td>\n      <td>111.0</td>\n      <td>12.13</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>82047.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>24.7</td>\n      <td>91.0</td>\n      <td>2.0</td>\n      <td>105.0</td>\n      <td>3.12</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":261},{"cell_type":"code","source":"train = train.dropna(subset=[\"age_group\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:52.930713Z","iopub.execute_input":"2025-06-24T06:06:52.931437Z","iopub.status.idle":"2025-06-24T06:06:52.950091Z","shell.execute_reply.started":"2025-06-24T06:06:52.931414Z","shell.execute_reply":"2025-06-24T06:06:52.949234Z"}},"outputs":[],"execution_count":262},{"cell_type":"code","source":"train[\"age_group\"] = train[\"age_group\"].map({\"Adult\": 0, \"Senior\": 1})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:52.950937Z","iopub.execute_input":"2025-06-24T06:06:52.951221Z","iopub.status.idle":"2025-06-24T06:06:52.969983Z","shell.execute_reply.started":"2025-06-24T06:06:52.951193Z","shell.execute_reply":"2025-06-24T06:06:52.969057Z"}},"outputs":[],"execution_count":263},{"cell_type":"code","source":"train['age_group'].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:52.971488Z","iopub.execute_input":"2025-06-24T06:06:52.972034Z","iopub.status.idle":"2025-06-24T06:06:52.992127Z","shell.execute_reply.started":"2025-06-24T06:06:52.972010Z","shell.execute_reply":"2025-06-24T06:06:52.991295Z"}},"outputs":[{"execution_count":264,"output_type":"execute_result","data":{"text/plain":"0    0\n1    0\n2    0\n3    0\n4    0\nName: age_group, dtype: int64"},"metadata":{}}],"execution_count":264},{"cell_type":"code","source":"train['age_group'].head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:52.993067Z","iopub.execute_input":"2025-06-24T06:06:52.993387Z","iopub.status.idle":"2025-06-24T06:06:53.010594Z","shell.execute_reply.started":"2025-06-24T06:06:52.993356Z","shell.execute_reply":"2025-06-24T06:06:53.009971Z"}},"outputs":[{"execution_count":265,"output_type":"execute_result","data":{"text/plain":"0    0\n1    0\n2    0\n3    0\n4    0\n5    0\n6    0\n7    0\n8    1\n9    0\nName: age_group, dtype: int64"},"metadata":{}}],"execution_count":265},{"cell_type":"code","source":"print(train[\"age_group\"].unique())\nprint(train[\"age_group\"].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.011408Z","iopub.execute_input":"2025-06-24T06:06:53.011627Z","iopub.status.idle":"2025-06-24T06:06:53.029373Z","shell.execute_reply.started":"2025-06-24T06:06:53.011607Z","shell.execute_reply":"2025-06-24T06:06:53.028550Z"}},"outputs":[{"name":"stdout","text":"[0 1]\n0\n","output_type":"stream"}],"execution_count":266},{"cell_type":"code","source":"train.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.030257Z","iopub.execute_input":"2025-06-24T06:06:53.030552Z","iopub.status.idle":"2025-06-24T06:06:53.073812Z","shell.execute_reply.started":"2025-06-24T06:06:53.030524Z","shell.execute_reply":"2025-06-24T06:06:53.073043Z"}},"outputs":[{"execution_count":267,"output_type":"execute_result","data":{"text/plain":"               SEQN     RIAGENDR       PAQ605       BMXBMI       LBXGLU  \\\ncount   1940.000000  1934.000000  1939.000000  1934.000000  1939.000000   \nmean   78685.510825     1.509307     1.825683    27.981127    99.466220   \nstd     2927.348984     0.500043     0.399355     7.343856    16.738574   \nmin    73564.000000     1.000000     1.000000    14.500000    63.000000   \n25%    76188.250000     1.000000     2.000000    22.800000    91.000000   \n50%    78719.000000     2.000000     2.000000    26.800000    97.000000   \n75%    81222.750000     2.000000     2.000000    31.300000   104.000000   \nmax    83727.000000     2.000000     7.000000    70.100000   405.000000   \n\n            DIQ010       LBXGLT        LBXIN    age_group  \ncount  1934.000000  1941.000000  1943.000000  1952.000000  \nmean      2.015512   115.070067    11.875265     0.160861  \nstd       0.186916    46.133851     9.779149     0.367497  \nmin       1.000000    40.000000     0.140000     0.000000  \n25%       2.000000    87.000000     5.795000     0.000000  \n50%       2.000000   105.000000     9.030000     0.000000  \n75%       2.000000   131.000000    14.480000     0.000000  \nmax       3.000000   604.000000   102.290000     1.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SEQN</th>\n      <th>RIAGENDR</th>\n      <th>PAQ605</th>\n      <th>BMXBMI</th>\n      <th>LBXGLU</th>\n      <th>DIQ010</th>\n      <th>LBXGLT</th>\n      <th>LBXIN</th>\n      <th>age_group</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1940.000000</td>\n      <td>1934.000000</td>\n      <td>1939.000000</td>\n      <td>1934.000000</td>\n      <td>1939.000000</td>\n      <td>1934.000000</td>\n      <td>1941.000000</td>\n      <td>1943.000000</td>\n      <td>1952.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>78685.510825</td>\n      <td>1.509307</td>\n      <td>1.825683</td>\n      <td>27.981127</td>\n      <td>99.466220</td>\n      <td>2.015512</td>\n      <td>115.070067</td>\n      <td>11.875265</td>\n      <td>0.160861</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2927.348984</td>\n      <td>0.500043</td>\n      <td>0.399355</td>\n      <td>7.343856</td>\n      <td>16.738574</td>\n      <td>0.186916</td>\n      <td>46.133851</td>\n      <td>9.779149</td>\n      <td>0.367497</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>73564.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>14.500000</td>\n      <td>63.000000</td>\n      <td>1.000000</td>\n      <td>40.000000</td>\n      <td>0.140000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>76188.250000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>22.800000</td>\n      <td>91.000000</td>\n      <td>2.000000</td>\n      <td>87.000000</td>\n      <td>5.795000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>78719.000000</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n      <td>26.800000</td>\n      <td>97.000000</td>\n      <td>2.000000</td>\n      <td>105.000000</td>\n      <td>9.030000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>81222.750000</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n      <td>31.300000</td>\n      <td>104.000000</td>\n      <td>2.000000</td>\n      <td>131.000000</td>\n      <td>14.480000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>83727.000000</td>\n      <td>2.000000</td>\n      <td>7.000000</td>\n      <td>70.100000</td>\n      <td>405.000000</td>\n      <td>3.000000</td>\n      <td>604.000000</td>\n      <td>102.290000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":267},{"cell_type":"code","source":"y = train[\"age_group\"]\nX = train.drop(columns=[\"age_group\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.074602Z","iopub.execute_input":"2025-06-24T06:06:53.074903Z","iopub.status.idle":"2025-06-24T06:06:53.079833Z","shell.execute_reply.started":"2025-06-24T06:06:53.074881Z","shell.execute_reply":"2025-06-24T06:06:53.078937Z"}},"outputs":[],"execution_count":268},{"cell_type":"code","source":"X_dropped = X.dropna()\ny_dropped = y.loc[X_dropped.index]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.082475Z","iopub.execute_input":"2025-06-24T06:06:53.082752Z","iopub.status.idle":"2025-06-24T06:06:53.100471Z","shell.execute_reply.started":"2025-06-24T06:06:53.082728Z","shell.execute_reply":"2025-06-24T06:06:53.099540Z"}},"outputs":[],"execution_count":269},{"cell_type":"code","source":"model.fit(X_dropped, y_dropped)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.101474Z","iopub.execute_input":"2025-06-24T06:06:53.102228Z","iopub.status.idle":"2025-06-24T06:06:53.427437Z","shell.execute_reply.started":"2025-06-24T06:06:53.102204Z","shell.execute_reply":"2025-06-24T06:06:53.426605Z"}},"outputs":[{"execution_count":270,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(class_weight='balanced', random_state=42)","text/html":"<style>#sk-container-id-14 {color: black;background-color: white;}#sk-container-id-14 pre{padding: 0;}#sk-container-id-14 div.sk-toggleable {background-color: white;}#sk-container-id-14 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-14 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-14 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-14 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-14 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-14 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-14 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-14 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-14 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-14 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-14 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-14 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-14 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-14 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-14 div.sk-item {position: relative;z-index: 1;}#sk-container-id-14 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-14 div.sk-item::before, #sk-container-id-14 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-14 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-14 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-14 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-14 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-14 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-14 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-14 div.sk-label-container {text-align: center;}#sk-container-id-14 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-14 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-14\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" checked><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":270},{"cell_type":"code","source":"print(X.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.428322Z","iopub.execute_input":"2025-06-24T06:06:53.428556Z","iopub.status.idle":"2025-06-24T06:06:53.432890Z","shell.execute_reply.started":"2025-06-24T06:06:53.428537Z","shell.execute_reply":"2025-06-24T06:06:53.432129Z"}},"outputs":[{"name":"stdout","text":"Index(['SEQN', 'RIAGENDR', 'PAQ605', 'BMXBMI', 'LBXGLU', 'DIQ010', 'LBXGLT',\n       'LBXIN'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":271},{"cell_type":"code","source":"# Combine for uniform preprocessing\ncombined = pd.concat([train, test], axis=0).reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.433657Z","iopub.execute_input":"2025-06-24T06:06:53.433878Z","iopub.status.idle":"2025-06-24T06:06:53.450654Z","shell.execute_reply.started":"2025-06-24T06:06:53.433859Z","shell.execute_reply":"2025-06-24T06:06:53.449861Z"}},"outputs":[],"execution_count":272},{"cell_type":"code","source":"# Impute missing values with median\nimputer = SimpleImputer(strategy=\"median\")\ncombined_imputed = pd.DataFrame(imputer.fit_transform(combined), columns=combined.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.451526Z","iopub.execute_input":"2025-06-24T06:06:53.451808Z","iopub.status.idle":"2025-06-24T06:06:53.476553Z","shell.execute_reply.started":"2025-06-24T06:06:53.451780Z","shell.execute_reply":"2025-06-24T06:06:53.475589Z"}},"outputs":[],"execution_count":273},{"cell_type":"code","source":"# Split back into train and test\nX_train = combined_imputed.iloc[:len(y)]\nX_test = combined_imputed.iloc[len(y):]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.477561Z","iopub.execute_input":"2025-06-24T06:06:53.477909Z","iopub.status.idle":"2025-06-24T06:06:53.486720Z","shell.execute_reply.started":"2025-06-24T06:06:53.477879Z","shell.execute_reply":"2025-06-24T06:06:53.485844Z"}},"outputs":[],"execution_count":274},{"cell_type":"code","source":"if 'age_group' in X_train.columns:\n    X_train = X_train.drop(columns=['age_group'])\n    X_test = X_test.drop(columns=['age_group'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.487509Z","iopub.execute_input":"2025-06-24T06:06:53.487766Z","iopub.status.idle":"2025-06-24T06:06:53.505107Z","shell.execute_reply.started":"2025-06-24T06:06:53.487746Z","shell.execute_reply":"2025-06-24T06:06:53.504292Z"}},"outputs":[],"execution_count":275},{"cell_type":"code","source":"# Feature engineering: simple Health Risk Score\nX_train = X_train.copy()\nX_test = X_test.copy()\nX_train.loc[:, \"HealthRiskScore\"] = (X_train[\"BMXBMI\"] * X_train[\"LBXGLU\"] * X_train[\"LBXIN\"]) ** (1/3)\nX_test.loc[:, \"HealthRiskScore\"] = (X_test[\"BMXBMI\"] * X_test[\"LBXGLU\"] * X_test[\"LBXIN\"]) ** (1/3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.506016Z","iopub.execute_input":"2025-06-24T06:06:53.506301Z","iopub.status.idle":"2025-06-24T06:06:53.526607Z","shell.execute_reply.started":"2025-06-24T06:06:53.506273Z","shell.execute_reply":"2025-06-24T06:06:53.525596Z"}},"outputs":[],"execution_count":276},{"cell_type":"code","source":"print(y.value_counts(normalize=True))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.527577Z","iopub.execute_input":"2025-06-24T06:06:53.527973Z","iopub.status.idle":"2025-06-24T06:06:53.542283Z","shell.execute_reply.started":"2025-06-24T06:06:53.527949Z","shell.execute_reply":"2025-06-24T06:06:53.541519Z"}},"outputs":[{"name":"stdout","text":"age_group\n0    0.839139\n1    0.160861\nName: proportion, dtype: float64\n","output_type":"stream"}],"execution_count":277},{"cell_type":"code","source":"# Model and cross-validation\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.543076Z","iopub.execute_input":"2025-06-24T06:06:53.543357Z","iopub.status.idle":"2025-06-24T06:06:53.561803Z","shell.execute_reply.started":"2025-06-24T06:06:53.543335Z","shell.execute_reply":"2025-06-24T06:06:53.560892Z"}},"outputs":[],"execution_count":278},{"cell_type":"code","source":"model = RandomForestClassifier(class_weight=\"balanced\", random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.562741Z","iopub.execute_input":"2025-06-24T06:06:53.562993Z","iopub.status.idle":"2025-06-24T06:06:53.579541Z","shell.execute_reply.started":"2025-06-24T06:06:53.562972Z","shell.execute_reply":"2025-06-24T06:06:53.578807Z"}},"outputs":[],"execution_count":279},{"cell_type":"code","source":"cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.580422Z","iopub.execute_input":"2025-06-24T06:06:53.580764Z","iopub.status.idle":"2025-06-24T06:06:53.597201Z","shell.execute_reply.started":"2025-06-24T06:06:53.580741Z","shell.execute_reply":"2025-06-24T06:06:53.596400Z"}},"outputs":[],"execution_count":280},{"cell_type":"code","source":"scores = cross_val_score(model, X_train, y, cv=cv, scoring=\"f1\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:53.597979Z","iopub.execute_input":"2025-06-24T06:06:53.598227Z","iopub.status.idle":"2025-06-24T06:06:55.382343Z","shell.execute_reply.started":"2025-06-24T06:06:53.598206Z","shell.execute_reply":"2025-06-24T06:06:55.381704Z"}},"outputs":[],"execution_count":281},{"cell_type":"code","source":"print(\"Cross-validated F1 scores:\", scores)\nprint(\"Mean F1 score:\", scores.mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:55.383089Z","iopub.execute_input":"2025-06-24T06:06:55.383305Z","iopub.status.idle":"2025-06-24T06:06:55.387750Z","shell.execute_reply.started":"2025-06-24T06:06:55.383281Z","shell.execute_reply":"2025-06-24T06:06:55.387099Z"}},"outputs":[{"name":"stdout","text":"Cross-validated F1 scores: [0.17948718 0.2        0.08219178 0.25974026 0.23076923]\nMean F1 score: 0.19043769016371753\n","output_type":"stream"}],"execution_count":282},{"cell_type":"code","source":"# Train final model on full data\nmodel.fit(X_train, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:55.390726Z","iopub.execute_input":"2025-06-24T06:06:55.391204Z","iopub.status.idle":"2025-06-24T06:06:55.854308Z","shell.execute_reply.started":"2025-06-24T06:06:55.391183Z","shell.execute_reply":"2025-06-24T06:06:55.853462Z"}},"outputs":[{"execution_count":283,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(class_weight='balanced', random_state=42)","text/html":"<style>#sk-container-id-15 {color: black;background-color: white;}#sk-container-id-15 pre{padding: 0;}#sk-container-id-15 div.sk-toggleable {background-color: white;}#sk-container-id-15 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-15 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-15 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-15 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-15 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-15 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-15 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-15 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-15 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-15 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-15 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-15 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-15 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-15 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-15 div.sk-item {position: relative;z-index: 1;}#sk-container-id-15 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-15 div.sk-item::before, #sk-container-id-15 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-15 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-15 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-15 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-15 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-15 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-15 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-15 div.sk-label-container {text-align: center;}#sk-container-id-15 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-15 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-15\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" checked><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":283},{"cell_type":"code","source":"y_pred = model.predict(X_test)\nprint(classification_report(y, y_pred, target_names=[\"Adult\", \"Senior\"]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:55.855076Z","iopub.execute_input":"2025-06-24T06:06:55.855314Z","iopub.status.idle":"2025-06-24T06:06:55.881213Z","shell.execute_reply.started":"2025-06-24T06:06:55.855293Z","shell.execute_reply":"2025-06-24T06:06:55.880077Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/1370466079.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Adult\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Senior\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mclassification_report\u001b[0;34m(y_true, y_pred, labels, target_names, sample_weight, digits, output_dict, zero_division)\u001b[0m\n\u001b[1;32m   2308\u001b[0m     \"\"\"\n\u001b[1;32m   2309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2310\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2311\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2312\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     84\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0marray\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindicator\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m     \"\"\"\n\u001b[0;32m---> 86\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     87\u001b[0m     \u001b[0mtype_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y_true\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m     \u001b[0mtype_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y_pred\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    395\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    396\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 397\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    398\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    399\u001b[0m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [1952, 312]"],"ename":"ValueError","evalue":"Found input variables with inconsistent numbers of samples: [1952, 312]","output_type":"error"}],"execution_count":284},{"cell_type":"code","source":"importances = model.feature_importances_\n\nfeatures = X_train.columns  # or X.columns\n\nindices = np.argsort(importances)[::-1]\n\n# Plot\nplt.figure(figsize=(10, 6))\nplt.title(\"Feature Importances from Random Forest\")\nplt.bar(range(len(features)), importances[indices], align=\"center\")\nplt.xticks(range(len(features)), [features[i] for i in indices], rotation=45)\nplt.ylabel(\"Importance Score\")\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:55.882009Z","iopub.status.idle":"2025-06-24T06:06:55.882450Z","shell.execute_reply.started":"2025-06-24T06:06:55.882266Z","shell.execute_reply":"2025-06-24T06:06:55.882284Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions = model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:55.884465Z","iopub.status.idle":"2025-06-24T06:06:55.884807Z","shell.execute_reply.started":"2025-06-24T06:06:55.884633Z","shell.execute_reply":"2025-06-24T06:06:55.884673Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Save submission\nsubmission = pd.DataFrame({\"age_group\": predictions.astype(int)})\nsubmission.to_csv(\"predicted_submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T06:06:55.886107Z","iopub.status.idle":"2025-06-24T06:06:55.886460Z","shell.execute_reply.started":"2025-06-24T06:06:55.886281Z","shell.execute_reply":"2025-06-24T06:06:55.886298Z"}},"outputs":[],"execution_count":null}]}